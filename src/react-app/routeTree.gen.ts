/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ShowcaseRouteImport } from './routes/showcase'
import { Route as AboutRouteImport } from './routes/about'
import { Route as DashboardRouteImport } from './routes/_dashboard'
import { Route as DashboardIndexRouteImport } from './routes/_dashboard.index'
import { Route as DashboardSqlReplRouteImport } from './routes/_dashboard.sql-repl'
import { Route as DashboardSqlExecutionLogRouteImport } from './routes/_dashboard.sql-execution-log'
import { Route as DashboardMemoryBlocksRouteImport } from './routes/_dashboard.memory-blocks'
import { Route as DashboardGraphRouteImport } from './routes/_dashboard.graph'
import { Route as DashboardEntitiesRouteImport } from './routes/_dashboard.entities'
import { Route as DashboardEntitiesEntityIdRouteImport } from './routes/_dashboard.entities.$entityId'

const ShowcaseRoute = ShowcaseRouteImport.update({
  id: '/showcase',
  path: '/showcase',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardSqlReplRoute = DashboardSqlReplRouteImport.update({
  id: '/sql-repl',
  path: '/sql-repl',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardSqlExecutionLogRoute =
  DashboardSqlExecutionLogRouteImport.update({
    id: '/sql-execution-log',
    path: '/sql-execution-log',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardMemoryBlocksRoute = DashboardMemoryBlocksRouteImport.update({
  id: '/memory-blocks',
  path: '/memory-blocks',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardGraphRoute = DashboardGraphRouteImport.update({
  id: '/graph',
  path: '/graph',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardEntitiesRoute = DashboardEntitiesRouteImport.update({
  id: '/entities',
  path: '/entities',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardEntitiesEntityIdRoute =
  DashboardEntitiesEntityIdRouteImport.update({
    id: '/$entityId',
    path: '/$entityId',
    getParentRoute: () => DashboardEntitiesRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/about': typeof AboutRoute
  '/showcase': typeof ShowcaseRoute
  '/entities': typeof DashboardEntitiesRouteWithChildren
  '/graph': typeof DashboardGraphRoute
  '/memory-blocks': typeof DashboardMemoryBlocksRoute
  '/sql-execution-log': typeof DashboardSqlExecutionLogRoute
  '/sql-repl': typeof DashboardSqlReplRoute
  '/': typeof DashboardIndexRoute
  '/entities/$entityId': typeof DashboardEntitiesEntityIdRoute
}
export interface FileRoutesByTo {
  '/about': typeof AboutRoute
  '/showcase': typeof ShowcaseRoute
  '/entities': typeof DashboardEntitiesRouteWithChildren
  '/graph': typeof DashboardGraphRoute
  '/memory-blocks': typeof DashboardMemoryBlocksRoute
  '/sql-execution-log': typeof DashboardSqlExecutionLogRoute
  '/sql-repl': typeof DashboardSqlReplRoute
  '/': typeof DashboardIndexRoute
  '/entities/$entityId': typeof DashboardEntitiesEntityIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_dashboard': typeof DashboardRouteWithChildren
  '/about': typeof AboutRoute
  '/showcase': typeof ShowcaseRoute
  '/_dashboard/entities': typeof DashboardEntitiesRouteWithChildren
  '/_dashboard/graph': typeof DashboardGraphRoute
  '/_dashboard/memory-blocks': typeof DashboardMemoryBlocksRoute
  '/_dashboard/sql-execution-log': typeof DashboardSqlExecutionLogRoute
  '/_dashboard/sql-repl': typeof DashboardSqlReplRoute
  '/_dashboard/': typeof DashboardIndexRoute
  '/_dashboard/entities/$entityId': typeof DashboardEntitiesEntityIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/about'
    | '/showcase'
    | '/entities'
    | '/graph'
    | '/memory-blocks'
    | '/sql-execution-log'
    | '/sql-repl'
    | '/'
    | '/entities/$entityId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/showcase'
    | '/entities'
    | '/graph'
    | '/memory-blocks'
    | '/sql-execution-log'
    | '/sql-repl'
    | '/'
    | '/entities/$entityId'
  id:
    | '__root__'
    | '/_dashboard'
    | '/about'
    | '/showcase'
    | '/_dashboard/entities'
    | '/_dashboard/graph'
    | '/_dashboard/memory-blocks'
    | '/_dashboard/sql-execution-log'
    | '/_dashboard/sql-repl'
    | '/_dashboard/'
    | '/_dashboard/entities/$entityId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRouteWithChildren
  AboutRoute: typeof AboutRoute
  ShowcaseRoute: typeof ShowcaseRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/showcase': {
      id: '/showcase'
      path: '/showcase'
      fullPath: '/showcase'
      preLoaderRoute: typeof ShowcaseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/sql-repl': {
      id: '/_dashboard/sql-repl'
      path: '/sql-repl'
      fullPath: '/sql-repl'
      preLoaderRoute: typeof DashboardSqlReplRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/sql-execution-log': {
      id: '/_dashboard/sql-execution-log'
      path: '/sql-execution-log'
      fullPath: '/sql-execution-log'
      preLoaderRoute: typeof DashboardSqlExecutionLogRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/memory-blocks': {
      id: '/_dashboard/memory-blocks'
      path: '/memory-blocks'
      fullPath: '/memory-blocks'
      preLoaderRoute: typeof DashboardMemoryBlocksRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/graph': {
      id: '/_dashboard/graph'
      path: '/graph'
      fullPath: '/graph'
      preLoaderRoute: typeof DashboardGraphRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/entities': {
      id: '/_dashboard/entities'
      path: '/entities'
      fullPath: '/entities'
      preLoaderRoute: typeof DashboardEntitiesRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/entities/$entityId': {
      id: '/_dashboard/entities/$entityId'
      path: '/$entityId'
      fullPath: '/entities/$entityId'
      preLoaderRoute: typeof DashboardEntitiesEntityIdRouteImport
      parentRoute: typeof DashboardEntitiesRoute
    }
  }
}

interface DashboardEntitiesRouteChildren {
  DashboardEntitiesEntityIdRoute: typeof DashboardEntitiesEntityIdRoute
}

const DashboardEntitiesRouteChildren: DashboardEntitiesRouteChildren = {
  DashboardEntitiesEntityIdRoute: DashboardEntitiesEntityIdRoute,
}

const DashboardEntitiesRouteWithChildren =
  DashboardEntitiesRoute._addFileChildren(DashboardEntitiesRouteChildren)

interface DashboardRouteChildren {
  DashboardEntitiesRoute: typeof DashboardEntitiesRouteWithChildren
  DashboardGraphRoute: typeof DashboardGraphRoute
  DashboardMemoryBlocksRoute: typeof DashboardMemoryBlocksRoute
  DashboardSqlExecutionLogRoute: typeof DashboardSqlExecutionLogRoute
  DashboardSqlReplRoute: typeof DashboardSqlReplRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardEntitiesRoute: DashboardEntitiesRouteWithChildren,
  DashboardGraphRoute: DashboardGraphRoute,
  DashboardMemoryBlocksRoute: DashboardMemoryBlocksRoute,
  DashboardSqlExecutionLogRoute: DashboardSqlExecutionLogRoute,
  DashboardSqlReplRoute: DashboardSqlReplRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRouteWithChildren,
  AboutRoute: AboutRoute,
  ShowcaseRoute: ShowcaseRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
